# ABOUTME: Release workflow triggered by version tags
# ABOUTME: Builds multi-platform binaries and creates GitHub releases
name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  test:
    name: Test Before Release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libopus-dev libopusfile-dev libflac-dev portaudio19-dev

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run tests
      run: go test -v -race ./...

    - name: Run linter
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m

  build:
    name: Build ${{ matrix.os }} ${{ matrix.arch }}
    needs: test
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            runner: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libopus-dev libopusfile-dev libflac-dev portaudio19-dev libasound2-dev

    - name: Install dependencies (macOS)
      if: matrix.os == 'darwin'
      run: |
        brew install opus opusfile flac portaudio

    - name: Get version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Build binaries
      run: |
        mkdir -p dist

        # Linux: Build portable binaries with version injection
        # Note: Not fully static due to ALSA/PortAudio complexity, but self-contained for audio codecs
        export CGO_ENABLED=1

        VERSION="${{ steps.version.outputs.VERSION }}"
        LDFLAGS="-X github.com/Resonate-Protocol/resonate-go/internal/version.Version=${VERSION} -s -w"

        # Player
        go build -ldflags "${LDFLAGS}" -o dist/resonate-player-${{ matrix.os }}-${{ matrix.arch }} .

        # Server
        go build -ldflags "${LDFLAGS}" -o dist/resonate-server-${{ matrix.os }}-${{ matrix.arch }} ./cmd/resonate-server

        # Show dependencies for verification
        echo "Player dependencies:"
        ldd dist/resonate-player-${{ matrix.os }}-${{ matrix.arch }} || true
        echo "Server dependencies:"
        ldd dist/resonate-server-${{ matrix.os }}-${{ matrix.arch }} || true

    - name: Create archives
      run: |
        cd dist
        for binary in *; do
          if [ -f "$binary" ]; then
            tar czf "${binary}.tar.gz" "$binary"
          fi
        done
        ls -lh *.tar.gz

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ matrix.os }}-${{ matrix.arch }}
        path: dist/*.tar.gz

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        pattern: binaries-*
        merge-multiple: true

    - name: List artifacts
      run: ls -lh artifacts/

    - name: Generate release notes
      id: release_notes
      run: |
        PREV_TAG=$(git describe --tags --abbrev=0 ${{ steps.version.outputs.VERSION }}^ 2>/dev/null || echo "")
        if [ -z "$PREV_TAG" ]; then
          echo "NOTES=Initial release" >> $GITHUB_OUTPUT
        else
          NOTES=$(git log --pretty=format:"- %s (%h)" ${PREV_TAG}..${{ steps.version.outputs.VERSION }})
          echo "NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        fi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: Release ${{ steps.version.outputs.VERSION }}
        body: |
          ## Resonate Protocol ${{ steps.version.outputs.VERSION }}

          ### Downloads

          **Linux (x86_64) - Portable Binaries**

          - **Player:** `resonate-player-linux-amd64.tar.gz`
          - **Server:** `resonate-server-linux-amd64.tar.gz`

          âœ¨ **Portable binaries** that work on most modern Linux distributions!

          These binaries include all audio codec libraries and should work out-of-the-box on systems with:
          - ALSA audio system (standard on most Linux distros)
          - Standard C library (glibc)

          ### Installation

          ```bash
          # Download and extract
          tar xzf resonate-player-linux-amd64.tar.gz

          # Run immediately!
          ./resonate-player-linux-amd64
          ```

          If you get missing library errors, install the audio system package:
          ```bash
          # Debian/Ubuntu
          sudo apt-get install libasound2

          # Fedora/RHEL
          sudo dnf install alsa-lib

          # Arch Linux
          sudo pacman -S alsa-lib
          ```

          ### Building from Source (macOS/Other Platforms)

          For macOS or other platforms, you can build from source:

          ```bash
          git clone https://github.com/harperreed/resonate-go.git
          cd resonate-go

          # Install dependencies
          brew install opus opusfile flac  # macOS
          # or: sudo apt-get install libopus-dev libopusfile-dev libflac-dev  # Linux

          # Build
          go build -o resonate-player .
          ```

          ### Changes

          ${{ steps.release_notes.outputs.NOTES }}
        files: |
          artifacts/*.tar.gz
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
